/* Step 1: Write selector/rule property to add an underline when
links in the navigation are in the hover or focus state.*/
nav a:hover,
nav a:focus {
  text-decoration: underline;
}

/* Step 2a: Write selector/rule property to position the default position for the skip class element*/
.skip a {
  position: absolute;
  top: -40px;
  left: 0;
  /* The starter_style.css gave these, just reaffirming: */
  background: white;
  padding: 6px;
  z-index: 1;
  transition: top 1s ease-out;
}

/* Step 2b: Write selector/rule property to position the skip class element when it is in focus*/
.skip a:focus {
  top: 20px;
}

/* Step 3: Write selector/rule property to style all elements when in focus*/
/* The assignment wants a 2px solid border on all sides of any element in focus. */
:focus {
  outline: none; /* Remove default focus outline, if any */
  border: 2px solid black;
}

/* Step 4: Write selector/rule property to style the container */
.container {
  display: grid;
  grid-template-columns: 1fr 5fr 1fr; /* Mobile: 3 columns */
  row-gap: 15px;
  /* Let the rows size automatically as needed */
  grid-auto-rows: auto;
}

/* Step 5: Write selector/rule property to add the background image to the
first div in the grid and place it in the grid.
We do this via the .overview class (already has parallax code in starter_style). */
.overview {
  grid-column: 1 / 4; /* span all 3 columns */
  background-image: url("../images/header.jpg");
}

/* Steps 6 and 7: Place the next elements in the next four rows in the grid.
   .about, .method, .clients, .contact are text blocks in column 2
   .about-image, .method-image, .clients-image, .contact-image cover columns 1-3
   and each pair belongs to a separate row (2,3,4,5).
*/

/* Text blocks in column 2 */
.about {
  grid-column: 2 / 3;
  grid-row: 2;
}
.method {
  grid-column: 2 / 3;
  grid-row: 3;
}
.clients {
  grid-column: 2 / 3;
  grid-row: 4;
}
.contact {
  grid-column: 2 / 3;
  grid-row: 5;
}

/* Images covering all columns */
.about-image {
  grid-column: 1 / 4;
  grid-row: 2;
  max-height: 600px;
  overflow: hidden;
}
.method-image {
  grid-column: 1 / 4;
  grid-row: 3;
  max-height: 600px;
  overflow: hidden;
}
.clients-image {
  grid-column: 1 / 4;
  grid-row: 4;
  max-height: 600px;
  overflow: hidden;
}
.contact-image {
  grid-column: 1 / 4;
  grid-row: 5;
  max-height: 600px;
  overflow: hidden;
}

/* Step 8: Write the selector/rule property to style the .text-block class.
   Center horizontally and vertically with centered text. */
.text-block {
  display: grid;           /* We can use grid’s centering instead of Flex. */
  align-items: center;     /* vertical center */
  justify-items: center;   /* horizontal center */
  text-align: center;
}

/* Add your media query here */
@media screen and (min-width: 800px) {
  /* Step 9: Write the selector/rule property to style the nav element
     Move nav to the other side (right), with padding 30px top/bottom, 0 left/right. */
  nav {
    text-align: right;
    padding: 30px 0;
  }

  /* Step 10: Write the selector/rule property to update the .container class
     Five columns: 50px, auto, 500px, auto, 50px */
  .container {
    grid-template-columns: 50px auto 500px auto 50px;
  }

  /* Steps 11 and 12:
     The .about, .clients, .method-image, .contact-image begin in the 3rd column
       and span two columns => grid-column: 3 / 5
     The .method, .contact, .about-image, .clients-image begin in the 2nd column
       and span two columns => grid-column: 2 / 4
     (This “flips” the images vs. text so About/Clients text is on the right,
      Method/Contact text is on the left, etc.)
  */
  .about,
  .clients,
  .method-image,
  .contact-image {
    grid-column: 3 / 5;
  }

  .method,
  .contact,
  .about-image,
  .clients-image {
    grid-column: 2 / 4;
  }

  /* Step 13: Write the selector/rule property to update the .text-block class
     Has max-height of 250px and ensures overflow is scrollable. */
  .text-block {
    max-height: 250px;
    overflow: auto;
  }
}
